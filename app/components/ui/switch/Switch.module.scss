@import 'app/assets/styles/variables';

$base_width_xs: 45;
$base_width_sm: 50;
$base_width_base: 60;
$base_width_lg: 65;
$base_width_xl: 70;

$class_size: (
	'xs': $base_width_xs,
	'sm': $base_width_sm,
	'base': $base_width_base,
	'lg': $base_width_lg,
	'xl': $base_width_xl
);

$class_color: (
	'purple': $purple,
	'orange': $orange,
	'green': $green,
	'black': $black,
	'red': $red,
	'gray': $gray,
	'white': $white,
	'light-blue': $light-blue,
	'light-gray': $light-gray
);

@function size($base_width, $property: 0, $extra_width: 18, $extra_height: 8) {
	$offset: 5;
	@if $base_width <= 50 {
		$offset: 4;
	}
	@if $property == 'parent' {
		@return ($base_width + $extra_height) / 2 + $offset + px;
	}
	@if $property == 'child-dimension' {
		@return ($base_width + $extra_height) / 2 - $offset + px;
	}
	@if $property == 'child-translate' {
		@return ($base_width - $extra_height) / 2 + $extra_width - $offset + px;
	}
	@if $property == 'child-offset' {
		@return $offset + px;
	}
	@if $property == 'left-text' {
		@return $offset + 8 + px;
	}
	@if $property == 'right-text' {
		@return $offset + 8 + px;
	}

	@return $base_width + $extra_width + px;
}

@mixin parent_classes {
	@each $class, $size in $class_size {
		&.#{$class} {
			height: size($size, 'parent');
			width: size($size);
		}
	}
}
@mixin child_classes {
	@each $class, $size in $class_size {
		&.#{$class}::before {
			bottom: size($size, 'child-offset');
			height: size($size, 'child-dimension');
			left: size($size, 'child-offset');
			width: size($size, 'child-dimension');
		}
	}
}
@mixin translate_classes {
	@each $class, $size in $class_size {
		&.#{$class}::before {
			transform: translateX(size($size, 'child-translate'));
		}
	}
}
@mixin color_classes {
	@each $class, $color in $class_color {
		&.#{$class} {
			background-color: #{$color};
		}
	}
}

.text {
	&-left {
		opacity: 0;
		left: size($base_width_xs, 'left-text');
	}
	&-right {
		opacity: 1;
		right: size($base_width_xs, 'right-text');
	}
}

// container
.checkbox {
	display: inline-block;
	position: relative;

	@include parent_classes; // <- this mixin generate code like below
	// &.xs {
	// 	height: size($base_width_xs, 'parent');
	// 	width: size($base_width_xs);
	// }
	// &.sm {
	// 	height: size($base_width_sm, 'parent');
	// 	width: size($base_width_sm);
	// }
	// &.base {
	// 	height: size($base_width_base, 'parent');
	// 	width: size($base_width_base);
	// }
	// &.lg {
	// 	height: size($base_width_lg, 'parent');
	// 	width: size($base_width_lg);
	// }
	// &.xl {
	// 	height: size($base_width_xl, 'parent');
	// 	width: size($base_width_xl);
	// }
	// .......

	// needed to simulate new fake_input ( real input is hidden )
	.fake_input {
		background-color: $gray;
		bottom: 0;
		cursor: pointer;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
		transition: 0.4s;
		border-radius: 9999px;

		&::before {
			background-color: $white;
			content: '';
			position: absolute;
			transition: 0.4s;
			border-radius: 50%;
		}

		@include child_classes; // <- this mixin generate code like below
		// &.xs::before {
		// 	bottom: size($base_width_xs, 'child-offset');
		// 	height: size($base_width_xs, 'child-dimension');
		// 	left: size($base_width_xs, 'child-offset');
		// 	width: size($base_width_xs, 'child-dimension');
		// }
		// &.sm::before {
		// 	bottom: size($base_width_sm, 'child-offset');
		// 	height: size($base_width_sm, 'child-dimension');
		// 	left: size($base_width_sm, 'child-offset');
		// 	width: size($base_width_sm, 'child-dimension');
		// }
		// &.base::before {
		// 	bottom: size($base_width_base, 'child-offset');
		// 	height: size($base_width_base, 'child-dimension');
		// 	left: size($base_width_base, 'child-offset');
		// 	width: size($base_width_base, 'child-dimension');
		// }
		// &.lg::before {
		// 	bottom: size($base_width_lg, 'child-offset');
		// 	height: size($base_width_lg, 'child-dimension');
		// 	left: size($base_width_lg, 'child-offset');
		// 	width: size($base_width_lg, 'child-dimension');
		// }
		// &.xl::before {
		// 	bottom: size($base_width_xl, 'child-offset');
		// 	height: size($base_width_xl, 'child-dimension');
		// 	left: size($base_width_xl, 'child-offset');
		// 	width: size($base_width_xl, 'child-dimension');
		// }
		// .......
	}

	input {
		display: none;

		&:checked {
			// fake_input styles when input is checked
			& + .fake_input {
				& + .text-left {
					opacity: 1;
					& + .text-right {
						opacity: 0;
					}
				}

				@include color_classes; // <- this mixin generate code like below
				// &.purple {
				// 	background-color: $purple;
				// }
				// &.orange {
				// 	background-color: $orange;
				// }
				// &.green {
				// 	background-color: $green;
				// }
				// &.black {
				// 	background-color: $black;
				// }
				// &.red {
				// 	background-color: $red;
				// }
				// &.gray {
				// 	background-color: $gray;
				// }
				// &.light-blue {
				// 	background-color: $light-blue;
				// }
				// &.light-gray {
				// 	background-color: $light-gray;
				// }
				// .......

				@include translate_classes; // <- this mixin generate code like below
				// &.xs::before {
				// 	transform: translateX(size($base_width_xs, 'child-translate'));
				// }
				// &.sm::before {
				// 	transform: translateX(size($base_width_sm, 'child-translate'));
				// }
				// &.base::before {
				// 	transform: translateX(size($base_width_base, 'child-translate'));
				// }
				// &.lg::before {
				// 	transform: translateX(size($base_width_lg, 'child-translate'));
				// }
				// &.xl::before {
				// 	transform: translateX(size($base_width_xl, 'child-translate'));
				// }
				// .......
			}
		}
	}
}
