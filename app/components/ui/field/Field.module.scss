@import 'app/assets/styles/_variables.scss';

$xs: 45;
$sm: 50;
$base: 60;
$lg: 65;
$xl: 70;

// $sizes: 45, 50, 60 65, 70;

// @mixin m-sizes {
//   @for $i from 1 through $columns {
//   .col-#{$i} { width: $column-size * $i; }
//   }
// }

@function size($base_width, $property: 0, $extra_width: 18, $extra_height: 8) {
	$offset: 5;
	@if $base_width <= 50 {
		$offset: 4;
	}
	@if $property == 'parent' {
		@return ($base_width + $extra_height) / 2 + $offset + px;
	}
	@if $property == 'child-dimension' {
		@return ($base_width + $extra_height) / 2 - $offset + px;
	}
	@if $property == 'child-translate' {
		@return ($base_width - $extra_height) / 2 + $extra_width - $offset + px;
	}
	@if $property == 'child-offset' {
		@return $offset + px;
	}
	@if $property == 'left-text' {
		@return $offset + 8 + px;
	}
	@if $property == 'right-text' {
		@return $offset + 8 + px;
	}

	@return $base_width + $extra_width + px;
}

.On {
	opacity: 0;
	left: size($xs, 'left-text');
}
.Off {
	opacity: 1;
	right: size($xs, 'right-text');
}

// container
.checkbox {
	display: inline-block;
	position: relative;

	&.xs {
		height: size($xs, 'parent');
		width: size($xs);
	}
	&.sm {
		height: size($sm, 'parent');
		width: size($sm);
	}
	&.base {
		height: size($base, 'parent');
		width: size($base);
	}
	&.lg {
		height: size($lg, 'parent');
		width: size($lg);
	}
	&.xl {
		height: size($xl, 'parent');
		width: size($xl);
	}

	// needed to simulate new fake_input ( real input is hidden )
	.fake_input {
		background-color: $gray;
		bottom: 0;
		cursor: pointer;
		left: 0;
		position: absolute;
		right: 0;
		top: 0;
		transition: 0.4s;
		border-radius: 9999px;

		&::before {
			background-color: $white;
			content: '';
			position: absolute;
			transition: 0.4s;
			border-radius: 50%;
		}

		&.xs::before {
			bottom: size($xs, 'child-offset');
			height: size($xs, 'child-dimension');
			left: size($xs, 'child-offset');
			width: size($xs, 'child-dimension');
		}
		&.sm::before {
			bottom: size($sm, 'child-offset');
			height: size($sm, 'child-dimension');
			left: size($sm, 'child-offset');
			width: size($sm, 'child-dimension');
		}
		&.base::before {
			bottom: size($base, 'child-offset');
			height: size($base, 'child-dimension');
			left: size($base, 'child-offset');
			width: size($base, 'child-dimension');
		}
		&.lg::before {
			bottom: size($lg, 'child-offset');
			height: size($lg, 'child-dimension');
			left: size($lg, 'child-offset');
			width: size($lg, 'child-dimension');
		}
		&.xl::before {
			bottom: size($xl, 'child-offset');
			height: size($xl, 'child-dimension');
			left: size($xl, 'child-offset');
			width: size($xl, 'child-dimension');
		}
	}

	input {
		display: none;

		&:checked {
			// fake_input styles when input is checked
			& + .fake_input {
				& + .On {
					opacity: 1;
					& + .Off {
						opacity: 0;
					}
				}
				&.purple {
					background-color: $purple;
				}
				&.orange {
					background-color: $orange;
				}
				&.green {
					background-color: $green;
				}
				&.black {
					background-color: $black;
				}
				&.red {
					background-color: $red;
				}
				&.gray {
					background-color: $gray;
				}
				&.light-blue {
					background-color: $light-blue;
				}
				&.light-gray {
					background-color: $light-gray;
				}

				&.xs::before {
					transform: translateX(size($xs, 'child-translate'));
				}
				&.sm::before {
					transform: translateX(size($sm, 'child-translate'));
				}
				&.base::before {
					transform: translateX(size($base, 'child-translate'));
				}
				&.lg::before {
					transform: translateX(size($lg, 'child-translate'));
				}
				&.xl::before {
					transform: translateX(size($xl, 'child-translate'));
				}
			}
		}
	}
}
